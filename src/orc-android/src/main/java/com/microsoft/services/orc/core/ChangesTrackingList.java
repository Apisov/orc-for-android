
/**
 * ****************************************************************************
 * Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 * Licensed under the MIT or Apache License; see LICENSE in the source repository
 * root for authoritative license information.ï»¿
 * <p/>
 * *NOTE** This code was generated by a tool and will occasionally be
 * overwritten. We welcome comments and issues regarding this code; they will be
 * addressed in the generation tool. If you wish to submit pull requests, please
 * do so for the templates in that tool.
 * <p/>
 * This code was generated by Vipr (https://github.com/microsoft/vipr) using
 * the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
 * ****************************************************************************
 */
package com.microsoft.services.orc.core;

import java.util.List;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Collection;

public class ChangesTrackingList<E> implements List<E> {

    List<E> wrappedList;
    boolean changed;

    public ChangesTrackingList(List<E> listToWrap) {
        this.wrappedList = listToWrap;
        this.changed = false;
    }

    public boolean hasChanged() {
        return changed;
    }

    @Override
    public int size() {
        return wrappedList.size();
    }

    @Override
    public boolean isEmpty() {
        return wrappedList.isEmpty();
    }

    @Override
    public boolean contains(Object o) {
        return wrappedList.contains(o);
    }

    @Override
    public Iterator<E> iterator() {
        return wrappedList.iterator();
    }

    @Override
    public Object[] toArray() {
        return wrappedList.toArray();
    }

    @Override
    public <T> T[] toArray(T[] a) {
        return wrappedList.toArray(a);
    }

    @Override
    public boolean add(E e) {
        boolean ret = wrappedList.add(e);
        changed = true;
        return ret;
    }

    @Override
    public boolean remove(Object o) {
        boolean ret =  wrappedList.remove(o);
        changed = true;
        return ret;
    }

    @Override
    public boolean containsAll(Collection<?> c) {
        return wrappedList.containsAll(c);
    }

    @Override
    public boolean addAll(Collection<? extends E> c) {
        boolean ret =  wrappedList.addAll(c);
        changed = true;
        return ret;
    }

    @Override
    public boolean addAll(int index, Collection<? extends E> c) {
        boolean ret =  wrappedList.addAll(c);
        changed = true;
        return ret;
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        boolean ret =  wrappedList.removeAll(c);
        changed = true;
        return ret;
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        boolean ret = wrappedList.retainAll(c);
        changed = true;
        return ret;
    }

    @Override
    public void clear() {
        wrappedList.clear();
        changed = true;
    }

    @Override
    public E get(int index) {
        return wrappedList.get(index);
    }

    @Override
    public E set(int index, E element) {
        E ret = wrappedList.set(index, element);
        changed = true;
        return ret;
    }

    @Override
    public void add(int index, E element) {
        wrappedList.add(index, element);
        changed = true;
    }

    @Override
    public E remove(int index) {
        E ret =  wrappedList.remove(index);
        changed = true;
        return ret;
    }

    @Override
    public int indexOf(Object o) {
        return wrappedList.indexOf(o);
    }

    @Override
    public int lastIndexOf(Object o) {
        return wrappedList.lastIndexOf(o);
    }

    @Override
    public ListIterator<E> listIterator() {
        return wrappedList.listIterator();
    }

    @Override
    public ListIterator<E> listIterator(int index) {
        return wrappedList.listIterator(index);
    }

    @Override
    public List<E> subList(int fromIndex, int toIndex) {
        return wrappedList.subList(fromIndex, toIndex);
    }
}
