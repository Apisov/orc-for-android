
/**
 * ****************************************************************************
 * Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 * Licensed under the MIT or Apache License; see LICENSE in the source repository
 * root for authoritative license information.ï»¿
 * <p/>
 * *NOTE** This code was generated by a tool and will occasionally be
 * overwritten. We welcome comments and issues regarding this code; they will be
 * addressed in the generation tool. If you wish to submit pull requests, please
 * do so for the templates in that tool.
 * <p/>
 * This code was generated by Vipr (https://github.com/microsoft/vipr) using
 * the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
 * ****************************************************************************
 */
package com.microsoft.services.orc.core;

import java.util.AbstractMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The type ODataBaseEntity.
 */
public class ODataBaseEntity {

    /**
     * The $$ __ o data type.
     */
    protected String $$__ODataType;

    /**
     * The $$$ __ $$$ parent reference.
     */
    protected Map.Entry<ODataBaseEntity, String> $$$__$$$parentReference = null;

    /**
     * The $$$ __ $$$ updated values.
     */
    ConcurrentHashMap<String, Object> $$$__$$$updatedValues = new ConcurrentHashMap<String, Object>();

    /**
     * Sets o data type.
     *
     * @param value the value
     */
    protected void setODataType(String value) {
        this.$$__ODataType = value;
    }

    /**
     * Gets updated values.
     *
     * @return the updated values
     */
    public ConcurrentHashMap<String, Object> getUpdatedValues() {

        return new ConcurrentHashMap<String, Object>($$$__$$$updatedValues);
    }

    /**
     * Value changed.
     *
     * @param property the property
     * @param payload the payload
     */
    public void valueChanged(String property, Object payload) {
        $$$__$$$updatedValues.put(property, payload);
        if ($$$__$$$parentReference != null) {
            String referenceProperty = $$$__$$$parentReference.getValue();
            $$$__$$$parentReference.getKey().valueChanged(referenceProperty, this);
        }
    }

    /**
     * Sets parent.
     *
     * @param parentEntity the parent entity
     * @param referenceProperty the reference property
     */
    public void setParent(ODataBaseEntity parentEntity, String referenceProperty) {
        $$$__$$$parentReference = new AbstractMap.SimpleEntry<ODataBaseEntity, String>(parentEntity, referenceProperty);
    }
}
